//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "HW3_MagicSquare.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

TForm1 *Form1;

void MagicSquareOdd(int n, int ** magic_square, int initial_position, int movement);
void MagicSquareDoublyEven(int n, int ** magic_square, int initial_position, int movement);
void MagicSquareSinglyEven(int n, int ** magic_square);
void PrintMagicSquare(int n, int ** magic_square, bool check);
void DeleteMagicSquare(int n, int ** magic_square);
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
	int n = StrToInt(Edit1->Text);
	int ** magic_square;
	magic_square = new int * [n];
	for (int i = 0; i < n; i++)
		magic_square[i] = new int [n];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			magic_square[i][j] = 0;
	int initial_position = 0;
	int mark_initial_position = 0;
	if (RadioButton_top->Checked)
	{
		initial_position = 1;
		mark_initial_position++;
	}
	if (RadioButton_left->Checked)
	{
		initial_position = 2;
		mark_initial_position++;
	}
	if (RadioButton_bottom->Checked)
	{
		initial_position = 3;
		mark_initial_position++;
	}
	if (RadioButton_right->Checked)
	{
		initial_position = 4;
		mark_initial_position++;
	}
	int movement = 0;
	int mark_movement = 0;
	if (CheckBox_LT->Checked)
	{
		movement = 1;
		mark_movement++;
	}
	if (CheckBox_LB->Checked)
	{
		movement = 2;
		mark_movement++;
	}
	if (CheckBox_RT->Checked)
	{
		movement = 3;
		mark_movement++;
	}
	if (CheckBox_RB->Checked)
	{
		movement = 4;
		mark_movement++;
	}
	if (mark_initial_position != 1)
		Form1->Memo1->Lines->Add("The number of initial position should be ONE!!");
	if (mark_movement != 1)
		Form1->Memo1->Lines->Add("The number of movement should be ONE!!");
	else if (mark_initial_position == 1 && mark_movement == 1)
	{
		if (n == 1)
			magic_square[0][0] = 1;
		else if (n % 2 == 1)
			MagicSquareOdd(n, magic_square, initial_position, movement);
		else if (n % 4 == 0)
			MagicSquareDoublyEven(n, magic_square, initial_position, movement);
		else if (n % 2 == 0)
			MagicSquareSinglyEven(n, magic_square);
		bool check = CheckBox1->Checked;
		if (n != 2)
			PrintMagicSquare(n, magic_square, check);
	}
	DeleteMagicSquare(n, magic_square);
}
//---------------------------------------------------------------------------

void MagicSquareOdd(int n, int ** magic_square, int initial_position, int movement)
{
	if (n == 2)
	{
		Form1->Memo1->Lines->Add("輸入方塊邊長不能為2，不予處理");
		return;
	}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			magic_square[i][j] = 0;
	int i, j;
	switch (initial_position)
	{
		case 1:
			i = 0;
			j = (n - 1) / 2;
			break;
		case 2:
			i = (n - 1) / 2;
			j = 0;
			break;
		case 3:
			i = (n - 1);
			j = (n - 1) / 2;
			break;
		case 4:
			i = (n - 1) / 2;
			j = n - 1;
	}
	int move_x, move_y;
	switch (movement)
	{
		case 1:
			move_x = -1;
			move_y = -1;
			break;
		case 2:
			move_x = -1;
			move_y = 1;
			break;
		case 3:
			move_x = 1;
			move_y = -1;
			break;
		case 4:
			move_x = 1;
			move_y = 1;
	}
	int steps;
	magic_square[i][j] = 1;
	steps = 2;
	while (steps <= n * n)
	{
		i += move_y;
        if (i < 0)
			i += n;
		j += move_x;
		if (j < 0)
			j += n;
        i %= n;
		j %= n;
		if (magic_square[i][j] > 0)
		{
			i = (i - 2 * move_y);
			if (i < 0)
				i += n;
			j = (j - 1 * move_x);
			if (j < 0)
				j += n;
            i %= n;
			j %= n;
		}
		magic_square[i][j] = steps++;
	}
}

// Function for calculating Magic square
void MagicSquareDoublyEven(int n, int ** magic_square, int initial_position, int movement)
{
	// filling matrix with its count value
	// starting from 1;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			magic_square[i][j] = (n * i) + j + 1;

	// change value of Array elements
	// at fix location as per rule
    // (n*n+1)-arr[i][j]
    // Top Left corner of Matrix
    // (order (n/4)*(n/4))
	for (int i = 0; i < n / 4; i++)
		for (int j = 0; j < n / 4; j++)
			magic_square[i][j] = (n * n + 1) - magic_square[i][j];

    // Top Right corner of Matrix
    // (order (n/4)*(n/4))
	for (int i = 0; i < n / 4; i++)
		for (int j = 3 * (n / 4); j < n; j++)
			magic_square[i][j] = (n * n + 1) - magic_square[i][j];

	 // Bottom Left corner of Matrix
    // (order (n/4)*(n/4))
	for (int i = 3 * n / 4; i < n; i++)
		for (int j = 0; j < n / 4; j++)
			magic_square[i][j] = (n * n + 1) - magic_square[i][j];

    // Bottom Right corner of Matrix
    // (order (n/4)*(n/4))
	for (int i = 3 * n / 4; i < n; i++)
		for (int j = 3 * n / 4; j < n; j++)
			magic_square[i][j] = (n * n + 1) - magic_square[i][j];

    // Centre of Matrix (order (n/2)*(n/2))
	for (int i = n / 4; i < 3 * n / 4; i++)
		for (int j = n / 4; j < 3 * n / 4; j++)
			magic_square[i][j] = (n * n + 1) - magic_square[i][j];
}

void siamese(int from, int to, int n, int ** magic_square)
{
		int oneSide = to - from;
		int curCol = oneSide / 2;
		int curRow = 0;
		int count = oneSide * oneSide;
		int s = 1;
//		Form1->Memo1->Lines->Add(IntToStr(oneSide) + " ");
		while (count > 0)
		{
			bool done = false;
			while (done == false)
			{
				if(curCol >= oneSide)
					curCol = 0;
				if(curRow < 0)
					curRow = oneSide - 1;
				done = true;
				if (magic_square[curRow][curCol] != 0)
				{
					curCol -= 1;
					curRow += 2;
					if(curCol < 0)
						curCol = oneSide - 1;
					if(curRow >= oneSide)
						curRow -= oneSide;
					done = false;
				}
			}
			magic_square[curRow][curCol] = s;
			s++;
			count--;
			curCol++;
			curRow--;
		}
	}

void MagicSquareSinglyEven(int n, int ** magic_square)
{
	int half_n = n / 2;
	int add1 = n * n / 2;
    int add3 = n * n / 4;
	int add2 = 3 * add3;
    siamese(0, half_n, n, magic_square);

    for( int r = 0; r < half_n; r++ )
    {
        int i = 0;
		int j = 0;
		int row = r * n;
		for (int c = half_n; c < n; c++)
		{
			int m = magic_square[r][c - half_n];
			magic_square[r][c] = m + add1;
			magic_square[r + half_n][c] = m + add3;
			magic_square[r + half_n][c - half_n] = m + add2;
		}
	}

    int lc = (n - 2) / 4, co = n - (lc - 1);
    for (int r = 0; r < half_n; r++)
	{
        for (int c = co; c < n; c++)
		{
			magic_square[r][c] -= add3;
			magic_square[r + half_n][c] += add3;
        }
    }
    for (int r = 0; r < half_n; r++)
    {
        for (int c = 0; c < lc; c++ )
        {
            int cc = c;
			if (r == lc)
				cc++;
			magic_square[r][cc] += add2;
			magic_square[r + half_n][cc] -= add2;
        }
	}
}

void PrintMagicSquare(int n, int ** magic_square, bool check)
{
	Form1->Memo1->Lines->Add("----- " + IntToStr(n) + " × " + IntToStr(n) + " 的魔術方塊 -----\n");
	int max_len = IntToStr(n * n).Length();
	int block_len = max_len + 5;
	int blank_len;
	int * row_sum;
	row_sum = new int [n];
	for (int i = 0; i < n; i++)
		row_sum[i] = 0;

	for (int i = 0; i < n; i++)
	{
		String row;
		for (int j = 0; j < n; j++)
		{
			blank_len = block_len - IntToStr(magic_square[i][j]).Length();
			for (int k = 0; k < blank_len; k++)
				row += " ";
			row += IntToStr(magic_square[i][j]);
			if (check)
				row_sum[i] += magic_square[i][j];
		}
		if (check)
		{
			row += "  -->  ";
			row += IntToStr(row_sum[i]);
		}
		Form1->Memo1->Lines->Add(row);
	}
	int * column_sum;
	column_sum = new int [n];
	for (int i = 0; i < n; i++)
		column_sum[i] = 0;
	int * diagonal_sum;
	diagonal_sum = new int [2];
	for (int i = 0; i < 2; i++)
		diagonal_sum[i] = 0;
	if (check)
	{
		String other_sum = "";
		for (int i = 0; i < n; i++)
		{
            column_sum[i] = 0;
			for (int j = 0; j < n; j++)
				column_sum[i] += magic_square[j][i];
			blank_len = block_len - IntToStr(column_sum[i]).Length();
			for (int k = 0; k < blank_len - 1; k++)
				other_sum += " ";
			other_sum += "|";
			other_sum += IntToStr(column_sum[i]);
		}
		diagonal_sum[0] = 0;
		for (int i = 0; i < n; i++)
			diagonal_sum[0] += magic_square[i][i];
		blank_len = block_len - IntToStr(diagonal_sum[0]).Length();
		for (int j = 0; j < blank_len - 1; j++)
			other_sum += " ";
		other_sum += "\\";
		other_sum += IntToStr(diagonal_sum[0]);

		diagonal_sum[1] = 0;
		for (int i = 0; i < n; i++)
			diagonal_sum[1] += magic_square[n - i - 1][i];
		blank_len = block_len - IntToStr(diagonal_sum[1]).Length();
		for (int j = 0; j < blank_len - 1; j++)
			other_sum += " ";
		other_sum += "/";
		other_sum += IntToStr(diagonal_sum[1]);
		Form1->Memo1->Lines->Add(other_sum);
	}
	Form1->Memo1->Lines->Add("\n");
	// print square in StringGrid
	if (check) 
	{
		Form1->StringGrid1->RowCount = n + 1;
		Form1->StringGrid1->ColCount = n + 1;

        for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				Form1->StringGrid1->Cells[j][i] = magic_square[i][j];

		for (int i = 0; i < n + 1; i++)
		{
			if (i < n)
			{	
				for (int j = 0; j < n + 1; j++)
				{
					if (j < n)
						Form1->StringGrid1->Cells[j][i] = magic_square[i][j];
					else
						Form1->StringGrid1->Cells[j][i] = row_sum[i];
				}
			}
			else
				for (int j = 0; j < n; j++)
					Form1->StringGrid1->Cells[j][i] = column_sum[j];	
		}
		Form1->StringGrid1->Cells[n][n] = diagonal_sum[0];
	}
	else
	{
		Form1->StringGrid1->RowCount = n;
		Form1->StringGrid1->ColCount = n;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				Form1->StringGrid1->Cells[j][i] = magic_square[i][j];
	}

	if (check)
	{
		int * line_sum;
		line_sum = new int [3];
		line_sum[0] = row_sum[0];
		line_sum[1] = column_sum[0];
		line_sum[2] = diagonal_sum[0];
		bool check_sum = true;
		for (int i = 0; i < n - 1; i++)
		{
			if (row_sum[i] != row_sum[i + 1])
			{
				check_sum = false;
				break;
			}
		}
		if (check_sum == true)
		for (int i = 0; i < n - 1; i++)
		{
			if (column_sum[i] != column_sum[i + 1])
			{
				check_sum = false;
				break;
			}
		}
		if (check_sum == true)
		for (int i = 0; i < 2 - 1; i++)
		{
			if (diagonal_sum[i] != diagonal_sum[i + 1])
			{
				check_sum = false;
				break;
			}
		}
		if (check_sum == true)
			Form1->Memo1->Lines->Add("   It is THE Magic Square!!");
		else
			Form1->Memo1->Lines->Add("   It is NOT Magic Square!!");
	}
    Form1->Memo1->Lines->Add("\n");
	delete [] row_sum;
	delete [] column_sum;
	delete [] diagonal_sum;
}

void DeleteMagicSquare(int n, int ** magic_square)
{
	for (int i = 0; i < n; i++)
		delete [] magic_square[i];
	delete [] magic_square;
}
